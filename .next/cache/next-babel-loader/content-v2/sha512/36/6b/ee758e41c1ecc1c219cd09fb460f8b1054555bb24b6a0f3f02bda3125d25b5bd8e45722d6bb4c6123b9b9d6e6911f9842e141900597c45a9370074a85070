{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ana/Documentos/NLW4/NLW4-MoviIt/src/contexts/ChallangesContext.tsx\";\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentXP,\n    1: setCurrentXP\n  } = useState(0);\n  const {\n    0: completedChallenges,\n    1: setCompletedChallenges\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveCHallenge\n  } = useState(null);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveCHallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveCHallenge(null);\n  }\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentXP,\n      completedChallenges,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      experienceToNextLevel\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/ana/Documentos/NLW4/NLW4-MoviIt/src/contexts/ChallangesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentXP","setCurrentXP","completedChallenges","setCompletedChallenges","activeChallenge","setActiveCHallenge","levelUp","startNewChallenge","randomChallengeIndex","Math","floor","random","length","challenge","resetChallenge","experienceToNextLevel","pow"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAEA,OAAO,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAqBP,OAAO,SAASI,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAmE;AACxE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACO,SAAD;AAAA,OAAYC;AAAZ,MAA4BR,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM;AAAA,OAACS,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDV,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD;;AAEA,WAASa,OAAT,GAAmB;AACjBP,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASS,iBAAT,GAA6B;AAC3B,UAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBjB,UAAU,CAACkB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGnB,UAAU,CAACc,oBAAD,CAA5B;AACAH,IAAAA,kBAAkB,CAACQ,SAAD,CAAlB;AACD;;AAED,WAASC,cAAT,GAA0B;AACxBT,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,QAAMU,qBAAqB,GAAGN,IAAI,CAACO,GAAL,CAAS,CAAClB,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;AAEA,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AACjCA,MAAAA,KADiC;AAEjCE,MAAAA,SAFiC;AAGjCE,MAAAA,mBAHiC;AAIjCK,MAAAA,iBAJiC;AAKjCH,MAAAA,eALiC;AAMjCU,MAAAA,cANiC;AAOjCC,MAAAA;AAPiC,KAAnC;AAAA,cAUIlB;AAVJ;AAAA;AAAA;AAAA;AAAA,UADF;AAcD","sourcesContent":["import { createContext, ReactNode, useState } from 'react';\nimport challenges from '../../challenges.json';\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\ninterface ChallangesProviderProps {\n  children: ReactNode;\n}\n\ninterface Challenge {\n  type: 'body' | 'eye';\n  description: string;\n  amount: number;\n}\n\ninterface ChallengesContextData {\n  level: number,\n  currentXP: number\n  completedChallenges: number;\n  activeChallenge: Challenge;\n  startNewChallenge: () => void;\n  resetChallenge: () => void\n}\n\nexport function ChallengesProvider({ children }: ChallangesProviderProps) {\n  const [level, setLevel] = useState(1);\n  const [currentXP, setCurrentXP] = useState(0);\n  const [completedChallenges, setCompletedChallenges] = useState(0);\n  const [activeChallenge, setActiveCHallenge] = useState(null);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveCHallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveCHallenge(null);\n  }\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  return (\n    <ChallengesContext.Provider value={{\n      level,\n      currentXP,\n      completedChallenges,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      experienceToNextLevel,\n    }}\n    >\n      { children}\n    </ChallengesContext.Provider>\n  );\n}"]},"metadata":{},"sourceType":"module"}