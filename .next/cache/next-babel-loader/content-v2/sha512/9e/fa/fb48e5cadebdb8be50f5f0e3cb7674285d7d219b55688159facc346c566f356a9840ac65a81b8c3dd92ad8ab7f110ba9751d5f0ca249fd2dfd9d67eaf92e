{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ana/Documentos/NLW4/NLW4-MoviIt/src/contexts/ChallangesContext.tsx\";\nimport { createContext, useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentXP,\n    1: setCurrentXP\n  } = useState(0);\n  const {\n    0: completedChallenges,\n    1: setCompletedChallenges\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveCHallenge\n  } = useState(null);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n  useEffect(() => {\n    Cookies.set('level', level.toString());\n    Cookies.set('currentXP', currentXP.toString());\n    Cookies.set('completedChallenges', completedChallenges);\n  }, [level, currentXP, completedChallenges]);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function completedChallenge() {\n    if (!activeChallenge) return;\n    const {\n      amount\n    } = activeChallenge;\n    let finalXP = currentXP + amount;\n\n    if (finalXP > experienceToNextLevel) {\n      finalXP -= experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentXP(finalXP);\n    setActiveCHallenge(null);\n    setCompletedChallenges(completedChallenges + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveCHallenge(challenge);\n\n    if (Notification.permission === 'granted') {\n      new Notification('New Challenge!'), {\n        body: `Valendo ${challenge.amount}xp!`\n      };\n    }\n  }\n\n  function resetChallenge() {\n    setActiveCHallenge(null);\n  }\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentXP,\n      completedChallenges,\n      completedChallenge,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      experienceToNextLevel\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/ana/Documentos/NLW4/NLW4-MoviIt/src/contexts/ChallangesContext.tsx"],"names":["createContext","useState","useEffect","Cookies","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentXP","setCurrentXP","completedChallenges","setCompletedChallenges","activeChallenge","setActiveCHallenge","Notification","requestPermission","set","toString","levelUp","completedChallenge","amount","finalXP","experienceToNextLevel","startNewChallenge","randomChallengeIndex","Math","floor","random","length","challenge","permission","body","resetChallenge","pow"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,QAAnC,EAA6CC,SAA7C,QAA8D,OAA9D;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAEA,OAAO,MAAMC,iBAAiB,gBAAGL,aAAa,CAAC,EAAD,CAAvC;AAuBP,OAAO,SAASM,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAmE;AACxE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBR,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACS,SAAD;AAAA,OAAYC;AAAZ,MAA4BV,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM;AAAA,OAACW,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDZ,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM;AAAA,OAACa,eAAD;AAAA,OAAkBC;AAAlB,MAAwCd,QAAQ,CAAC,IAAD,CAAtD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,YAAY,CAACC,iBAAb;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAf,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,OAAO,CAACe,GAAR,CAAY,OAAZ,EAAqBV,KAAK,CAACW,QAAN,EAArB;AACAhB,IAAAA,OAAO,CAACe,GAAR,CAAY,WAAZ,EAAyBR,SAAS,CAACS,QAAV,EAAzB;AACAhB,IAAAA,OAAO,CAACe,GAAR,CAAY,qBAAZ,EAAmCN,mBAAnC;AACD,GAJQ,EAIP,CAACJ,KAAD,EAAQE,SAAR,EAAmBE,mBAAnB,CAJO,CAAT;;AAMA,WAASQ,OAAT,GAAmB;AACjBX,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASa,kBAAT,GAA8B;AAC5B,QAAG,CAACP,eAAJ,EAAqB;AAErB,UAAM;AAAEQ,MAAAA;AAAF,QAAaR,eAAnB;AACA,QAAIS,OAAO,GAAGb,SAAS,GAAGY,MAA1B;;AAEA,QAAGC,OAAO,GAAGC,qBAAb,EAAoC;AAClCD,MAAAA,OAAO,IAAIC,qBAAX;AACAJ,MAAAA,OAAO;AACR;;AAEDT,IAAAA,YAAY,CAACY,OAAD,CAAZ;AACAR,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACD;;AAED,WAASa,iBAAT,GAA6B;AAC3B,UAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBzB,UAAU,CAAC0B,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAG3B,UAAU,CAACsB,oBAAD,CAA5B;AACAX,IAAAA,kBAAkB,CAACgB,SAAD,CAAlB;;AAEA,QAAGf,YAAY,CAACgB,UAAb,KAA4B,SAA/B,EAA0C;AACxC,UAAIhB,YAAJ,CAAiB,gBAAjB,GAAoC;AAClCiB,QAAAA,IAAI,EAAG,WAAUF,SAAS,CAACT,MAAO;AADA,OAApC;AAGD;AACF;;AAED,WAASY,cAAT,GAA0B;AACxBnB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,QAAMS,qBAAqB,GAAGG,IAAI,CAACQ,GAAL,CAAS,CAAC3B,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;AAEA,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAE;AACjCA,MAAAA,KADiC;AAEjCE,MAAAA,SAFiC;AAGjCE,MAAAA,mBAHiC;AAIjCS,MAAAA,kBAJiC;AAKjCI,MAAAA,iBALiC;AAMjCX,MAAAA,eANiC;AAOjCoB,MAAAA,cAPiC;AAQjCV,MAAAA;AARiC,KAAnC;AAAA,cAWGjB;AAXH;AAAA;AAAA;AAAA;AAAA,UADF;AAeD","sourcesContent":["import { createContext, ReactNode, useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json';\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\ninterface ChallangesProviderProps {\n  children: ReactNode;\n}\n\ninterface Challenge {\n  type: 'body' | 'eye';\n  description: string;\n  amount: number;\n}\n\ninterface ChallengesContextData {\n  level: number,\n  currentXP: number,\n  completedChallenges: number,\n  completedChallenge: () => void,\n  activeChallenge: Challenge,\n  startNewChallenge: () => void,\n  resetChallenge: () => void,\n  experienceToNextLevel: number;\n}\n\nexport function ChallengesProvider({ children }: ChallangesProviderProps) {\n  const [level, setLevel] = useState(1);\n  const [currentXP, setCurrentXP] = useState(0);\n  const [completedChallenges, setCompletedChallenges] = useState(0);\n  const [activeChallenge, setActiveCHallenge] = useState(null);\n\n  useEffect(() => {\n    Notification.requestPermission();\n  }, [])\n\n  useEffect(() => {\n    Cookies.set('level', level.toString());\n    Cookies.set('currentXP', currentXP.toString());\n    Cookies.set('completedChallenges', completedChallenges)\n  },[level, currentXP, completedChallenges])\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function completedChallenge() {\n    if(!activeChallenge) return;\n\n    const { amount } = activeChallenge;\n    let finalXP = currentXP + amount;\n\n    if(finalXP > experienceToNextLevel) {\n      finalXP -= experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentXP(finalXP);\n    setActiveCHallenge(null);\n    setCompletedChallenges(completedChallenges + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveCHallenge(challenge);\n\n    if(Notification.permission === 'granted') {\n      new Notification('New Challenge!'), {\n        body: `Valendo ${challenge.amount}xp!`\n      }\n    }\n  }\n\n  function resetChallenge() {\n    setActiveCHallenge(null);\n  }\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  return (\n    <ChallengesContext.Provider value={{\n      level,\n      currentXP,\n      completedChallenges,\n      completedChallenge,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      experienceToNextLevel,\n    }}\n    >\n      {children}\n    </ChallengesContext.Provider>\n  );\n}"]},"metadata":{},"sourceType":"module"}